#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/ext_power.h>

#define DEF		0
#define SHIFT	1

#define xxx		&none	
#define ___		&trans


keymap {
	compatible = "zmk,keymap";

	default_layer { 
		display-name = "Default";
		bindings = <
&kp N1		  &kp N2		&kp N3		  &kp N4		&kp N5		  &kp N6		&kp N7		  &kp N8		&kp N9		  &kp N0		&kp MINUS	  &kp EQUAL		&kp BSPC
&kp Q		  &kp W			&kp E		  &kp R						  &kp R			&kp T		  &kp I			&kp O		  &kp Y			&kp P		  xxx			xxx
&kp A		  &kp S			&kp D		  &kp F						  &kp V			&kp H		  &kp J			&kp K		  &kp L			&kp APOS					&kp ENTER
&kp Z		  &kp X			&kp C		  							  &kp B			&kp N		  &kp M													  				&mo SHIFT
&kp LCTRL	  &kp LALT												  &kp SPACE												  &kp RALT		&kp RGUI					&kp RCTRL
		>;
	};
	
	default_layer { 
		display-name = "Shift";
		bindings = <
&kp RS(N1)	  &kp RS(N2)	&kp RS(N3)	  &kp RS(N4)	&kp RS(N5)	  &kp RS(N6)	&kp RS(N7)	  &kp RS(N8)	&kp RS(N9)	  &kp RS(N0)	&kp RS(MINUS) &kp RS(EQUAL)	&kp RS(BSPC)
&kp Q		  &kp W			&kp RS(E)	  &kp R						  &kp RS(R)		&kp RS(T)	  &kp RS(I)		&kp RS(O)	  &kp RS(Y)		&kp RS(P)	  xxx			xxx
&kp RS(A)	  &kp RS(S)		&kp RS(D)	  &kp RS(F)					  &kp RS(V)		&kp RS(H)	  &kp RS(J)		&kp RS(K)	  &kp RS(L)		&kp RS(APOS)				&kp RS(ENTER)
&kp RS(Z)	  &kp RS(X)		&kp RS(C)		  						  &kp RS(B)		&kp RS(N)	  &kp RS(M)																&mo SHIFT
&kp RS(LCTRL) &kp RS(LALT)											  &kp RS(SPACE)											  &kp RS(RALT)	&kp RS(RGUI)				&kp RS(RCTRL)
		>;
	};

// [0] = LAYOUT_default( /* Base */
// 		KC_1,		KC_2,	KC_3,	KC_4,	KC_5,	KC_6,	KC_7,	KC_8,	KC_9,	KC_0,		KC_MINS,	KC_EQL,	KC_BSPC,
// 		KC_Q,		KC_W,	KC_E,	KC_R,			KC_R,	KC_T,   KC_I,	KC_O,	KC_Y,		KC_P,		KC_NO,  KC_NO,
// 		KC_A,		KC_S,	KC_D,	KC_F,			KC_V,	KC_H,   KC_J,	KC_K,	KC_L,		KC_QUOT,			KC_ENT,
// 		KC_Z,		KC_X,	KC_C,					KC_B,   KC_N,	KC_M,									        MO(1),
// 		MO(1),	    KC_LALT,				KC_SPC,									KC_RALT,	KC_NO,			KC_RCTL
//     ),

//     [1] = LAYOUT_default( /* Shift */
//         S(KC_1),	S(KC_2),	S(KC_3),	S(KC_4),	S(KC_5),	S(KC_6),	S(KC_7),	S(KC_8),	S(KC_9),	S(KC_0),	S(KC_MINS),	S(KC_EQL),	S(KC_BSPC),
//         KC_Q,		KC_W,		S(KC_E),	KC_R,		            S(KC_R),	S(KC_T),	S(KC_I),	S(KC_O),	S(KC_Y),	S(KC_P),	KC_NO,      KC_NO,
//         S(KC_A),	S(KC_S),	S(KC_D),	S(KC_F),			    S(KC_V),	S(KC_H),	S(KC_J),    S(KC_K),	S(KC_L),	S(KC_QUOT),				S(KC_ENT),
//         S(KC_Z),	S(KC_X),	S(KC_C),							S(KC_B),    S(KC_N),	S(KC_M),            										MO(1),
// 			MO(1),  	S(KC_LALT),							S(KC_SPC),													S(KC_RALT),	KC_NO,		    		S(KC_RCTL)
//     ),

	
};